provider "azurerm" {
  features {}
}

provider "azuread" {
}


resource "azurerm_resource_group" "rg" {
  name     = var.resource_group_name
  location = var.location
}

locals {
  infra_rg_name       = "aks-poc"
  infra_nodes_rg_name = "aks-poc-nodes"
}

# The main resource group
resource "azurerm_resource_group" "main" {
  name     = locals.infra_rg_name
  location = var.location
}

# The AKS nodes resource group (auto generated by AKS cluster)
data "azurerm_resource_group" "nodes" {
  depends_on = [azurerm_kubernetes_cluster.main]
  name       = local.infra_nodes_rg_name
}

# Setting up networking
# use an existing VNET
data "azurerm_virtual_network" "main" {
  name                = "aks-poc-vnet"
  resource_group_name = azurerm_resource_group.main.name
}

# create the subnet
resource "azurerm_subnet" "aks" {
  name                 = "aks-subnet"
  virtual_network_name = data.azurerm_virtual_network.main.name
  address_prefixes     = ["10.0.0.0/24"]                  # Replace with the desired address prefix
  resource_group_name  = azurerm_resource_group.main.name # Replace with the appropriate resource group name
}

# secure it
resource "azurerm_network_security_group" "aks" {
  location            = var.location                     # Add the location attribute here
  name                = "my-nsg"                         # Add the name attribute here
  resource_group_name = azurerm_resource_group.main.name # Add the resource_group_name attribute here

  security_rule {
    # Add security rule attributes here
  }
  security_rule {
    # Add security rule attributes here
  }
}

# create a public IP for the LB
resource "azurerm_public_ip" "public_lb" {
  name                = "aks-poc-lb"
  resource_group_name = local.infra_nodes_rg_name
  location            = var.location # Add the location attribute here
  allocation_method   = "Static"     # Add the allocation_method attribute here with a valid value
}

# add DNS entry
resource "azurerm_dns_a_record" "public_lb_a" {
    name                = "example.com"
    zone_name           = "example.com"
    ttl                 = 300
    resource_group_name = local.infra_nodes_rg_name
    records             = [azurerm_public_ip.public_lb.ip_address]
}

# create identity (service principal, permissions for Kubernetes to create LoadBalancer)
# azureAD application created by AKS
data "azuread_service_principal" "main" {
  depends_on   = [azurerm_kubernetes_cluster.main]
  display_name = var.kubernetes_cluster_name
}

# Give full rights under AKS nodes resource group
resource "azurerm_role_assignment" "sudo_rg_nodes" {
  scope                            = data.azurerm_resource_group.nodes.id
  role_definition_name             = "Contributor"
  principal_id                     = data.azuread_service_principal.main.id
  skip_service_principal_aad_check = true
}

# If VNET is under another RG, give rights to read stuff
resource "azurerm_role_definition" "network_vnet_reader" {
  name  = "custom-k8s-network-vnet-reader"
  scope = data.azurerm_virtual_network.main.id

  permissions {
    actions = [
      "Microsoft.Network/virtualNetworks/read",
      "Microsoft.Network/virtualNetworks/subnets/read",
      "Microsoft.Network/routeTables/routes/read",
      "Microsoft.Network/routeTables/routes/write"
    ]
    not_actions = []
  }
}

resource "azurerm_role_assignment" "network_vnet_reader" {
  name               = "custom-k8s-network-vnet-reader" # Add the name attribute here
  scope              = data.azurerm_virtual_network.main.id
  role_definition_id = azurerm_role_definition.network_vnet_reader.role_definition_resource_id
  principal_id       = data.azuread_service_principal.main.id
}

# AKS cluster
resource "azurerm_kubernetes_cluster" "main" {
  name                = var.kubernetes_cluster_name
  location            = var.location
  resource_group_name = azurerm_resource_group.main.name
  dns_prefix          = var.kubernetes_cluster_name
  node_resource_group = local.infra_nodes_rg_name
  kubernetes_version  = "1.26.3"

  default_node_pool {
    name                        = "default"
    node_count                  = 2
    os_disk_size_gb             = 30
    vm_size                     = "Standard_D2_v2"
    temporary_name_for_rotation = "tmpdefault"
    vnet_subnet_id              = azurerm_subnet.aks.id
  }

  linux_profile {
    admin_username = "azureuser"
    ssh_key {
      key_data = file("~/.ssh/id_rsa_azure.pub")
    }
  }

  identity {
    type = "SystemAssigned"
  }

  azure_active_directory_role_based_access_control {
    managed            = true
    azure_rbac_enabled = true
    # admin_group_object_ids = var.kubernetes_rbac_admin_groups
  }
}