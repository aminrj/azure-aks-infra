provider "azurerm" {
  features {}
}

provider "azuread" {
}


# resource "azurerm_resource_group" "rg" {
#   name     = var.resource_group_name
#   location = var.location
# }

locals {
  infra_rg_name       = "aks-poc"
  infra_nodes_rg_name = "aks-poc-nodes"
}

# The main resource group
resource "azurerm_resource_group" "main" {
  name     = local.infra_rg_name
  location = var.location
}

# The AKS nodes resource group (auto generated by AKS cluster)
data "azurerm_resource_group" "nodes" {
  name       = local.infra_nodes_rg_name
  # location   = var.location # Add the location attribute here
  depends_on = [azurerm_kubernetes_cluster.main]
}

# Setting up networking
# use an existing VNET
resource "azurerm_virtual_network" "main" {
  name                = "aks-poc-vnet"
  address_space       = ["10.0.0.0/16"] 
  resource_group_name = azurerm_resource_group.main.name
  location            = var.location
}

# create the subnet
resource "azurerm_subnet" "aks" {
  name                 = "aks-subnet"
  address_prefixes     = ["10.0.1.0/24"] 
  virtual_network_name = azurerm_virtual_network.main.name
  resource_group_name  = azurerm_resource_group.main.name 
}

# secure it
resource "azurerm_network_security_group" "aks" {
  location            = var.location                     # Add the location attribute here
  name                = "my-nsg"                         # Add the name attribute here
  resource_group_name = azurerm_resource_group.main.name # Add the resource_group_name attribute here

  security_rule {
    # Add security rule attributes here
    name                       = "allow_ssh"
    priority                   = 1001
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "22"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }
}

# create a public IP for the LB
resource "azurerm_public_ip" "public_lb" {
  name                = "aks-poc-lb"
  resource_group_name = local.infra_nodes_rg_name
  location            = var.location # Add the location attribute here
  allocation_method   = "Static"     # Add the allocation_method attribute here with a valid value
  depends_on = [azurerm_kubernetes_cluster.main]
}

# create identity (service principal, permissions for Kubernetes to create LoadBalancer)
# azureAD application created by AKS
# data "azuread_service_principal" "main" {
#   depends_on   = [azurerm_kubernetes_cluster.main]
#   display_name = var.kubernetes_cluster_name
# }

# # Give full rights under AKS nodes resource group
# resource "azurerm_role_assignment" "sudo_rg_nodes" {
#   scope                            = data.azurerm_resource_group.nodes.id
#   role_definition_name             = "Contributor"
#   principal_id                     = data.azuread_service_principal.main.id
#   skip_service_principal_aad_check = true
# }

# # If VNET is under another RG, give rights to read stuff
# resource "azurerm_role_definition" "network_vnet_reader" {
#   name  = "custom-k8s-network-vnet-reader"
#   scope = azurerm_virtual_network.main.id

#   permissions {
#     actions = [
#       "Microsoft.Network/virtualNetworks/read",
#       "Microsoft.Network/virtualNetworks/subnets/read",
#       "Microsoft.Network/routeTables/routes/read",
#       "Microsoft.Network/routeTables/routes/write"
#     ]
#     not_actions = []
#   }
# }

# resource "azurerm_role_assignment" "network_vnet_reader" {
#   # name               = azurerm_role_definition.network_vnet_reader.name
#   scope              = azurerm_virtual_network.main.id
#   role_definition_id = azurerm_role_definition.network_vnet_reader.role_definition_resource_id
#   principal_id       = data.azuread_service_principal.main.id
# }

# AKS cluster
resource "azurerm_kubernetes_cluster" "main" {
  name                = var.kubernetes_cluster_name
  location            = var.location
  resource_group_name = azurerm_resource_group.main.name
  dns_prefix          = var.kubernetes_cluster_name
  node_resource_group = local.infra_nodes_rg_name
  kubernetes_version  = "1.28"

  default_node_pool {
    name                        = "default"
    node_count                  = 2
    os_disk_size_gb             = 30
    vm_size                     = "Standard_D2_v2"
    temporary_name_for_rotation = "tmpdefault"
    # vnet_subnet_id              = azurerm_subnet.aks.id
  }

  linux_profile {
    admin_username = "azureuser"
    ssh_key {
      key_data = file("~/.ssh/id_rsa_azure.pub")
    }
  }

  identity {
    type = "SystemAssigned"
  }

  azure_active_directory_role_based_access_control {
    managed            = true
    azure_rbac_enabled = true
    # admin_group_object_ids = var.kubernetes_rbac_admin_groups
  }
}